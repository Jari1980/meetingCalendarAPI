package org.workshop.meetingcalendarapi.service;


import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.web.client.RestClient;
import org.workshop.meetingcalendarapi.domain.dto.MeetingDTOForm;
import org.workshop.meetingcalendarapi.domain.entity.CalendarUser;
import org.workshop.meetingcalendarapi.domain.entity.Meeting;
import org.workshop.meetingcalendarapi.domain.model.MeetingLevel;
import org.workshop.meetingcalendarapi.domain.model.UserRole;
import org.workshop.meetingcalendarapi.repository.CalendarUserRepository;
import org.workshop.meetingcalendarapi.repository.MeetingsRepository;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;

@DataJpaTest
@AutoConfigureTestDatabase
public class MeetingServiceTest {

    @Autowired
    private MeetingsRepository meetingsRepository;
    @Autowired
    private CalendarUserRepository calendarUserRepository;
    @Autowired
    EntityManager entityManager;


    //Creating a user then a meeting from DTO form
    @DisplayName("Create meeting from DTO form")
    @Test
    public void testCreateMeetingFromDTOForm() {
        calendarUserRepository.save(CalendarUser.builder()
                .username("User1")
                .email("User1@test.com")
                .role(UserRole.ADMIN)
                .password("1234")
                .build());

        MeetingDTOForm form = new MeetingDTOForm(
                "Test Meeting",
                LocalDate.parse("2000-01-01"),
                LocalTime.parse("12:00"),
                MeetingLevel.SOLO,
                "",
                "",
                0 //Im not using id when creating meeting its autogenerated, this is here for update only
        );

        Meeting meeting = Meeting.builder()
                .title(form.title())
                .description(form.description())
                .level(form.level())
                .date(form.date())
                .time(form.time())
                .participants(form.participants())
                .description(form.description())
                .user(calendarUserRepository.getReferenceById("User1"))
                .build();
        meetingsRepository.save(meeting);

        assertEquals("Test Meeting", meetingsRepository.findById(meeting.getId()).orElseThrow().getTitle());
    }

    //Creating user/meeting same as above then deleting meeting, search should return Optional.empty()
    @DisplayName("DeleteMeeting with id")
    @Test
    public void testDeleteMeetingWithId() {
        calendarUserRepository.save(CalendarUser.builder()
                .username("User1")
                .email("User1@test.com")
                .role(UserRole.ADMIN)
                .password("1234")
                .build());

        MeetingDTOForm form = new MeetingDTOForm(
                "Test Meeting",
                LocalDate.parse("2000-01-01"),
                LocalTime.parse("12:00"),
                MeetingLevel.SOLO,
                "",
                "",
                0 //Im not using id when creating meeting its autogenerated, this is here for update only
        );

        Meeting meeting = Meeting.builder()
                .title(form.title())
                .description(form.description())
                .level(form.level())
                .date(form.date())
                .time(form.time())
                .participants(form.participants())
                .description(form.description())
                .user(calendarUserRepository.getReferenceById("User1"))
                .build();
        meetingsRepository.save(meeting);

        meetingsRepository.deleteById(meeting.getId());

        assertEquals(Optional.empty(), meetingsRepository.findById(meeting.getId()));
    }

    // Creating user, meeting then updating meeting according to form
    @DisplayName("Uppdate meeting by form")
    @Test
    @Transactional
    public void testUpdateMeetingByForm() {
        calendarUserRepository.save(CalendarUser.builder()
                .username("TestUser")
                .email("TestUser@test.com")
                .role(UserRole.ADMIN)
                .password("1234")
                .build());

        meetingsRepository.save(Meeting.builder()
                .title("Test meeting")
                .date(LocalDate.parse("2025-04-14"))
                .time(LocalTime.parse("14:00"))
                .level(MeetingLevel.SOLO)
                .participants("Broccoli")
                .description("Testing")
                .user(calendarUserRepository.getReferenceById("TestUser"))
                .build());

        MeetingDTOForm form = new MeetingDTOForm(
                "Edited Test Meeting",
                LocalDate.parse("2000-01-01"),
                LocalTime.parse("12:00"),
                MeetingLevel.SOLO,
                "",
                "",
                1 //The id will come autofilled from frontend
        );

        meetingsRepository.updateMeeting(form.id(), form.title(), form.description(), form.date(), form.time(),
                form.level(), form.participants());

        entityManager.clear();

        assertEquals("Edited Test Meeting", meetingsRepository.findById(1).orElseThrow().getTitle());
    }
}
